{
  "details": "Extension of {ERC20} that adds a cap to the supply of tokens.",
  "methods":
  {
    "allowance(address,address)":
    {
      "details": "See {IERC20-allowance}."
    },
    "approve(address,uint256)":
    {
      "details": "See {IERC20-approve}.     * Requirements:     * - `spender` cannot be the zero address."
    },
    "balanceOf(address)":
    {
      "details": "See {IERC20-balanceOf}."
    },
    "cap()":
    {
      "details": "Returns the cap on the token's total supply."
    },
    "constructor":
    {
      "details": "Sets the value of the `cap`. This value is immutable, it can only be set once during construction."
    },
    "decimals()":
    {
      "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).     * Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called.     * NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
    },
    "decreaseAllowance(address,uint256)":
    {
      "details": "Atomically decreases the allowance granted to `spender` by the caller.     * This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.     * Emits an {Approval} event indicating the updated allowance.     * Requirements:     * - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
    },
    "increaseAllowance(address,uint256)":
    {
      "details": "Atomically increases the allowance granted to `spender` by the caller.     * This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.     * Emits an {Approval} event indicating the updated allowance.     * Requirements:     * - `spender` cannot be the zero address."
    },
    "name()":
    {
      "details": "Returns the name of the token."
    },
    "symbol()":
    {
      "details": "Returns the symbol of the token, usually a shorter version of the name."
    },
    "totalSupply()":
    {
      "details": "See {IERC20-totalSupply}."
    },
    "transfer(address,uint256)":
    {
      "details": "See {IERC20-transfer}.     * Requirements:     * - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
    },
    "transferFrom(address,address,uint256)":
    {
      "details": "See {IERC20-transferFrom}.     * Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20};     * Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
    }
  }
}